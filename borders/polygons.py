import torch

def unsqueeze_n(x, at, n):
    for _ in range(n):
        x = x.unsqueeze(at)
    return x

class InsidePolygons():
    def __init__(self, polies):
        self.fro = torch.cat(polies, dim=-2)
        self.to = torch.cat([poly.roll(-1, dims=0) for poly in polies], dim=-2)

        self.v1 = (self.to - self.fro).unsqueeze(0)
        self.fro = self.fro.unsqueeze(0)

    def inside(self, x):
        fro, to, v1 = self.fro, self.to, self.v1
        x = x.unsqueeze(-2)

        t1 = ( x - fro).select(-1, 1) / v1.select(-1, 1)
        t0 = (x - fro - v1*t1.unsqueeze(-1)).select(-1, 0)

        hits = (t0 > 0) * (t1 > 0) * (t1 <= 1)

        nhits = hits.sum(dim=-1, keepdim=True)
        inside = nhits.remainder(2) == 1
        y = torch.cat([inside, inside.logical_not()], dim=-1).to(torch.float32)

        return y

def inside_any(polies, x):
    return InsidePolygons(polies).inside(x)

def inside(poly, x):
    return inside_any(poly.unsqueeze(0), x)


triangle = [
    [-0.5, 0.5],
    [-0.5, -0.5],
    [0.5, 0]
]

M = [
  [ -0.900,   0.900],   # Left leg bottom-left
  [ -0.900,  -0.900],   # Left leg top-left
  [ -0.600,  -0.900],   # Left leg top-right
  [ -0.200,  -0.403],
  [  0.000,  -0.187],   # Center valley
  [  0.200,  -0.393],
  [  0.600,  -0.900],
  [  0.900,  -0.900],
  [  0.900,   0.900],   # Right leg bottom-right
  [  0.600,   0.900],
  [  0.600,  -0.400],
  [  0.300,  -0.100],
  [  0.000,   0.200],   # Center peak
  [ -0.300,  -0.100],
  [ -0.600,  -0.400],
  [ -0.600,  0.900],
]

def name():
    WIDTH = 500
    HEIGHT = 90
    raw = [[[18.89,8],[44,7],[54,9],[64.8,16],[69,24],[68.61,42],[66.74,46],[58,54.98],[48,59],[28.67,60],[28.67,90],[26,91],[18.89,90],[18.89,8]],[[464.89,8],[474.87,8],[473.11,66],[472,67],[465.13,66],[464.89,8]],[[28.67,18],[48,17],[56.52,22],[58.85,26],[59,38],[54,46.23],[50,48.95],[42,50.91],[28.67,50],[28.67,18]],[[84.89,32],[93.11,32],[94,77.15],[123.01,34],[126,31],[135,32],[134,91],[126.57,90],[126,45.23],[96,89.24],[94,91],[84.89,90],[84.89,32]],[[146.57,32],[191.88,32],[191.88,38],[190,39.11],[174.07,40],[173.88,90],[172,91],[164.75,90],[164.61,40],[148,39.11],[146.57,38],[146.57,32]],[[219.19,32],[238,31],[244,33.01],[250.69,38],[256.88,48],[258.87,58],[256.88,74],[250.69,84],[240,91],[226,92.98],[216,90.42],[205.17,82],[201,74],[199.13,60],[201.72,48],[205,42],[212,35.02],[219.19,32]],[[273,32],[282.87,32],[283.1,58],[286,62.52],[292,65],[300,64.88],[312.5,60],[312.89,32],[322.42,32],[322,90.42],[312.89,90],[312,68.61],[300,73],[286,73],[277.66,68],[273.08,58],[273,32]],[[341.13,32],[351,32],[352,58.73],[376.52,32],[388.93,32],[361.47,60],[389.82,90],[378,91],[352,63.06],[351,90],[341.13,90],[341.13,32]],[[411.75,32],[432,31.38],[440.81,38],[444.42,52],[444,90.42],[436,91],[434,82.76],[426,90.31],[418,92.98],[412,92.77],[406,90.98],[399,84],[397.04,80],[397.08,70],[402.1,62],[410,57],[430,54.57],[434.89,52],[432.92,44],[428,39.15],[414,39.1],[404,44.91],[402.97,36],[411.75,32]],[[221.21,40],[236,39.02],[242,42.99],[247,50],[248.75,56],[248.6,68],[244.18,78],[238,83],[230,84.97],[220,82.88],[211.39,74],[209.12,66],[209.31,56],[213.28,46],[221.21,40]],[[428.36,62],[434.89,62],[434.77,70],[432.84,76],[426,82.94],[420,84.89],[416,84.86],[410.4,82],[407.02,78],[408,68.74],[416,63.56],[428.36,62]],[[467.09,80],[470,79],[474,81.07],[475.88,86],[474.93,90],[470,93],[468,92.86],[463.04,88],[463.08,84],[467.09,80]]]
    return [(torch.tensor(poly) - torch.tensor([WIDTH / 2, HEIGHT / 2])) / (WIDTH / 2) for poly in raw]
